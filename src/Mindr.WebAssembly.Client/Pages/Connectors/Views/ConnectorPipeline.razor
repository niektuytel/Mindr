@using Mindr.WebAssembly.Client.Components
@using Mindr.Domain.HttpRunner.Models;
@using Mindr.WebAssembly.Client.Pages.Connectors.Components
@using MudBlazor
@using MudBlazor.Utilities;

@namespace Mindr.WebAssembly.Client.Pages.Connectors.Components
@inherits LayoutComponentBase

<MudStack Style="width: 100%;">
    <MudStack Row="true">
        <MudButton StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Primary" Size="Size.Small" @onclick="HandleOnSave" Disabled="@(!DataHasChanged)">Save</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Primary" Size="Size.Small" @onclick="ItemDrawer!.HandleOpenOnCreate">Add</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.PlayArrow" IconColor="Color.Primary" Size="Size.Small" @onclick="HandleOnRunAll">Run All</MudButton>
    </MudStack>
    @if (IsLoading)
    {
        <MudProgressLinear Color="Color.Info" Indeterminate="true" />
    }
    else
    {
        <MudGrid Justify="@Justify.FlexStart" Spacing="1">
        <MudItem xs="6">
            <MudDropContainer T="DropItem" Items="@Items" @ref="Container" Class="d-flex flex-wrap flex-grow-1" ItemsSelector="@((item,column) => item.Identifier == column)" ItemDropped="ItemDropped">
                <ChildContent>
                    <MudDropZone T="DropItem" Identifier="dropzone1" Class="flex-grow-1" AllowReorder="true" />
                </ChildContent>
                <ItemRenderer>
                    @if (HasEmptyVariable(context))
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Warning" />
                    }
                    <MudPaper Class="pa-1 ma-1" Elevation="3" @onclick="() => HandleOnSelectItem(context)">
                        <MudStack Row="true">
                            <div style=@(GetMethodStyle(context))>
                                @context.Request.Method.ToUpper();
                            </div>
                            IsLoading: @context.IsLoading
                            IsSelected: @(context.Id == SelectedItem?.Id)
                            <div class="overflow-ellipsis">
                                @context.Request.Url.Raw
                            </div>
                        </MudStack>
                        <MudStack Row="true">
                            <div class="overflow-ellipsis">
                                @context.Name
                            </div>
                        </MudStack>
                    </MudPaper>
                </ItemRenderer>
            </MudDropContainer>
        </MudItem>
        <MudItem xs="6">
            @if(SelectedItem != null)
            {
                <MudPaper Class="pa-1 ma-1" Elevation="1">
                    <MudStack Row="true">
                        <MudButton StartIcon="@Icons.Material.Filled.PlayArrow" IconColor="Color.Primary" Size="Size.Small" @onclick="() => HandleOnRunItem(SelectedItem)">Run</MudButton>
                        <MudButton StartIcon="@Icons.Material.Filled.Edit" IconColor="Color.Primary" Size="Size.Small" @onclick="@(() => ItemDrawer!.HandleOpenOnUpdate((HttpItem)SelectedItem))">Edit</MudButton>
                        <MudButton StartIcon="@Icons.Material.Filled.Delete" IconColor="Color.Primary" Size="Size.Small" @onclick="@(async () => await HandleOnRemoveItem(SelectedItem))">Delete</MudButton>
                    </MudStack>
                    <MudForm @bind-IsValid="@success" FieldChanged="@((args) => DataHasChanged = true)" Class="overflow-auto">
                        <MudTabs Elevation="0" Border="true" ApplyEffectsToContainer="true">
                            <MudTabPanel Text="Inbound">
                                @foreach (var variable in SelectedItem.Request.Variables)
                                {
                                    <MudTextField @bind-Value="@variable.Value" Placeholder="@variable.Key" Label="@variable.Key" Required="true" RequiredError="Value is required!" />
                                }
                            </MudTabPanel>
                            @if (SelectedItem.Result != null)
                            {
                                <MudTabPanel Text="Response">
                                    <pre style="border: solid 1px lightgray;">@SelectedItem.Result.ToString()</pre>
                                </MudTabPanel>
                            }
                            <MudTabPanel Text="Outbound">
                                @foreach (var variable in GetItemResponseVariables()!)
                                {
                                    <MudTextField @bind-Value="@variable.Value" Placeholder="@variable.Key" Label="@variable.Key" Required="true" RequiredError="Value is required!" />
                                }
                            </MudTabPanel>
                        </MudTabs>
                    </MudForm>
                </MudPaper>
            }
        </MudItem>
    </MudGrid>
    }
</MudStack>
<HttpItemDrawer @ref="ItemDrawer" OnCreate="@HandleOnCreateItem" OnUpdate="HandleOnUpdateItem"/>

