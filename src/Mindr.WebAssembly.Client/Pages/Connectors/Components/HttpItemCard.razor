@using Mindr.WebAssembly.Client.Components
@using MudBlazor

@namespace Mindr.WebAssembly.Client.Pages.Connectors.Components
@inherits LayoutComponentBase

<MudPaper Class="pa-16 ma-2" Elevation="3">
    <MudStack Row="true">
        @if (HasEmptyVariable())
        {
            <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Warning" />
            @*<FluentIcon Style="--accent-fill-rest: darkorange;margin-top: 4px" Name="@FluentIcons.Warning" Size="@IconSize.Size24" Variant="@IconVariant.Regular" Color="@Color.Accent"/>*@
        }
        <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="@(async () => await OnRemove(Data))"></MudIconButton>
        <div title="@Data.Description" class=@(IsSelected ? "card-selected" : "card-select") onclick="@(async () => await OnSelect(Data))">
            <MudStack Row="true" Style="padding: 5px;" HorizontalAlignment="StackHorizontalAlignment.Center" Orientation="Orientation.Horizontal" HorizontalGap="0">
                <div style=@(GetMethodStyle())>
                    @Data.Request.Method.ToUpper()
                </div>
                <div class="overflow-ellipsis">
                    @Data.Request.Url.Raw
                </div>
            </MudStack>
            <div class="overflow-ellipsis">
                @Data.Name
            </div>
            @*<FluentDivider />
            <Stack Style="padding: 5px;" Orientation="Orientation.Horizontal" HorizontalGap="0">
            </Stack>*@
        </div>
    </MudStack>
</MudPaper>
@*
<Stack Orientation="Orientation.Horizontal" HorizontalGap="0">
    <Stack Orientation="Orientation.Vertical" VerticalAlignment="StackVerticalAlignment.Bottom" VerticalGap="0">
        <FluentButton Appearance="Appearance.Stealth" onclick="@(async () => await OnRemove(Data))">
            <FluentIcon Name="@FluentIcons.Delete" Size="@IconSize.Size16" Variant="@IconVariant.Regular" Color="@Color.Accent" />
        </FluentButton>
    </Stack>


    <Stack Orientation="Orientation.Vertical" HorizontalAlignment="StackHorizontalAlignment.Center" VerticalGap="0">
        <div title="@Data.Description" class=@(IsSelected ? "card-selected" : "card-select") onclick="@(async () => await OnSelect(Data))">
            <Stack Style="padding: 5px;" HorizontalAlignment="StackHorizontalAlignment.Center" Orientation="Orientation.Horizontal" HorizontalGap="0">
                <div style=@(GetMethodStyle())>
                    @Data.Request.Method.ToUpper()
                </div>
                <div class="overflow-ellipsis">
                    @Data.Request.Url.Raw
                </div>
            </Stack>
            <FluentDivider />
            <Stack Style="padding: 5px;" Orientation="Orientation.Horizontal" HorizontalGap="0">
                <div class="overflow-ellipsis">
                    @Data.Name
                </div>
            </Stack>
        </div>
        @if (Data.Result != null)
        {
            <div>
                <FluentBadge Fill=@GetStatusCodeStyle() Color="white">
                    @((int)Data.Result.StatusCode) @Data.Result.StatusCode
                </FluentBadge>
            </div>
        }
        else if (Data.IsLoading)
        {
            <FluentProgressRing Style="width:20px;height:20px;margin-bottom:5px"/>
        }
        <div class="seperator" />
    </Stack>
    @if (HasEmptyVariable())
    {
        <Stack Orientation="Orientation.Vertical" VerticalAlignment="StackVerticalAlignment.Center" VerticalGap="0">
            <FluentIcon Style="--accent-fill-rest: darkorange;margin-top: 4px" Name="@FluentIcons.Warning" Size="@IconSize.Size24" Variant="@IconVariant.Regular" Color="@Color.Accent"/>
        </Stack>
    }
</Stack>*@
