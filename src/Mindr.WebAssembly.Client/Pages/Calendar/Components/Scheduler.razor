@namespace Mindr.WebAssembly.Client.Pages.Calendar.Components

@using Microsoft.JSInterop
@using Mindr.WebAssembly.Client.Pages.Calendar.Components
@using System.Globalization
@using MudBlazor

@inject IJSRuntime jsRuntime

<div class="scheduler">
    <div class="header">
        <div class="actions">
            @Header
            <button class="btn today" @onclick="() => ChangeDate()">@TodayButtonText</button>
            <div class="navigation">
                <button class="btn icon-btn" @onclick="() => ChangeDate(-1)">
                    <svg viewBox="0 0 24 24">
                        <path d="M24 0v24H0V0h24z" fill="none"/>
                        <path d="M14 7l-5 5 5 5V7z"/>
                    </svg>
                </button>
                <span class="selected-month">@DateDisplay</span>
                <button class="btn icon-btn" @onclick="() => ChangeDate(+1)">
                    <svg viewBox="0 0 24 24">
                        <path d="M0 0h24v24H0V0z" fill="none"/>
                        <path d="M10 17l5-5-5-5v10z"/>
                    </svg>
                </button>
            </div>
            @if (_loading)
            {
                <div class="scheduler-loader" style="--size: 25px; --color1: #666; --color2: #ccc;"></div>
            }
            else
            {
                <span></span>
            }
        </div>
    </div>
    @if(ViewType == "month")
    {
        <div class="month">
            <div class="week header">
                @for (int d=0;d<7;d++)
                {
                    int dayNumber = (int)(StartDayOfWeek + d) % 7;
                    string dayName = CultureInfo.CurrentCulture.DateTimeFormat.DayNames[dayNumber];
                    <div class="day-of-month">
                        <span class="full-dayname">@dayName</span>
                        <span class="short-dayname">@dayName.Substring(0, 3)</span>
                    </div>
                }
            </div>
            <CascadingValue IsFixed="true" Value="this">
                @Appointments
                @if (_draggingStart is not null && _draggingEnd is not null)
                {
                    @if (_showNewAppointment)
                    {
                        <Appointment @ref="DraggingAppointment" Start="_draggingStart.Value" End="_draggingEnd.Value" Color="@ThemeColor">
                            @NewAppointmentText
                        </Appointment>
                    }

                    @if (_reschedulingAppointment is not null)
                    {
                        <Appointment @ref="DraggingAppointment" Start="_draggingStart.Value" End="_draggingEnd.Value" Color="@_reschedulingAppointment.Color">
                            @_reschedulingAppointment?.RenderChildContent()
                        </Appointment>
                    }
                }

                @foreach (var week in GetDaysInRange().Chunk(7))
                {
                    var (start, end) = (week.First(), week.Last());
                    <SchedulerWeek Start="start" End="end" Appointments="GetAppointmentsInRange(start, end)" @key="week" />
                }
            </CascadingValue>
        </div>
    }
    else if(ViewType == "day")
    {
        <div class="month">
            <div class="week header">
                @{
                    string dayName = CultureInfo.CurrentCulture.DateTimeFormat.DayNames[CurrentDate.Day];
                    <div class="day-of-month">
                        <span class="full-dayname">@dayName</span>
                        <span class="short-dayname">@dayName.Substring(0, 3)</span>
                    </div>
                }
            </div>
            <CascadingValue IsFixed="true" Value="this">
                @Appointments
                @if (_draggingStart is not null && _draggingEnd is not null)
                {
                    @if (_showNewAppointment)
                    {
                        <Appointment @ref="DraggingAppointment" Start="_draggingStart.Value" End="_draggingEnd.Value" Color="@ThemeColor">
                            @NewAppointmentText
                        </Appointment>
                    }

                    @if (_reschedulingAppointment is not null)
                    {
                        <Appointment @ref="DraggingAppointment" Start="_draggingStart.Value" End="_draggingEnd.Value" Color="@_reschedulingAppointment.Color">
                            @_reschedulingAppointment?.RenderChildContent()
                        </Appointment>
                    }
                }

                @{
                    <div class="days">
                        <SchedulerDay Day="CurrentDate"/>
                    </div>
                }
            </CascadingValue>
        </div>
    }
    else
    {
        <div class="month">
            <div class="week header">
                @for (int d = 0; d < 7; d++)
                {
                    int dayNumber = (int)(StartDayOfWeek + d) % 7;
                    string dayName = CultureInfo.CurrentCulture.DateTimeFormat.DayNames[dayNumber];
                    <div class="day-of-month">
                        <span class="full-dayname">@dayName</span>
                        <span class="short-dayname">@dayName.Substring(0, 3)</span>
                    </div>
                }
            </div>
            <CascadingValue IsFixed="true" Value="this">
                @Appointments
                @if (_draggingStart is not null && _draggingEnd is not null)
                {
                    @if (_showNewAppointment)
                    {
                        <Appointment @ref="DraggingAppointment" Start="_draggingStart.Value" End="_draggingEnd.Value" Color="@ThemeColor">
                            @NewAppointmentText
                        </Appointment>
                    }

                    @if (_reschedulingAppointment is not null)
                    {
                        <Appointment @ref="DraggingAppointment" Start="_draggingStart.Value" End="_draggingEnd.Value" Color="@_reschedulingAppointment.Color">
                            @_reschedulingAppointment?.RenderChildContent()
                        </Appointment>
                    }
                }
                
                @{
                    var week = GetDaysInRange();
                    var (start, end) = (week.First(), week.Last());
                    <SchedulerWeek Start="start" End="end" Appointments="GetAppointmentsInRange(start, end)" @key="week" />
                }
            </CascadingValue>
        </div>
    }
</div>