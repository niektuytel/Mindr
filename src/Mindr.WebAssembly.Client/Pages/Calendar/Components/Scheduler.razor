@namespace Mindr.WebAssembly.Client.Pages.Calendar.Components

@using Microsoft.JSInterop
@using Mindr.Domain.Models.DTO.Calendar;
@using Mindr.WebAssembly.Client.Pages.Calendar.Components
@using System.Globalization
@using MudBlazor

@inject IJSRuntime jsRuntime

<MudToolBar>
    <MudStack Row="true" Spacing="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@OnHamburgerClick" />
        <MudSelect 
            T="string"
            Value="CalendarViewTypeService.Value"
            ValueChanged="CalendarViewTypeService.SetOnAction"
            Style="width: 100px;" 
            Variant="Variant.Outlined"
            Margin="Margin.Dense"
        >
            @*<MudSelectItem Value="@("day")">Day</MudSelectItem>*@
            <MudSelectItem Value="@("month")">Month</MudSelectItem>
            <MudSelectItem Value="@("week")">Week</MudSelectItem>
        </MudSelect>
    </MudStack>
    <MudSpacer />
    <MudStack Row="true" Spacing="1">
        <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowLeft" Color="Color.Inherit" OnClick="@(async () => await LoadDateRangeData(-1))" />
        <MudText Typo="Typo.h6" Align="Align.Center" Style="align-self: center;">@_dateDisplay</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowRight" Color="Color.Inherit" OnClick="@(async () => await LoadDateRangeData(+1))" />
    </MudStack>
    <MudSpacer />
    @if (_loading)
    {
        <MudProgressCircular Color="Color.Default" Size="Size.Small" Indeterminate="true" />
    }
    else
    {
        <div style="width:24px"/>
    }
</MudToolBar>
<div class="scheduler">
    <CascadingValue IsFixed="true" Value="this">
        @Appointments
        @if (_draggingStart is not null && _draggingEnd is not null)
        {
            var data = new CalendarAppointment()
            {
                StartDate = new() { DateTime = _draggingStart.Value }, 
                EndDate = new() { DateTime = _draggingEnd.Value }, 
                Color = ThemeColor
            };

            @if (_showNewAppointment)
            {
                <Appointment @ref="DraggingAppointment" Data="data">
                    @NewAppointmentText
                </Appointment>
            }

            @if (_reschedulingAppointment is not null)
            {
                data.Color = _reschedulingAppointment.Data.Color;
                <Appointment @ref="DraggingAppointment" Data="data">
                    @_reschedulingAppointment?.RenderChildContent()
                </Appointment>
            }
        }

        @if (CalendarViewTypeService.IsMonth())
        {
            <div class="month">
                <div class="week header">
                    @for (int d = 0; d < 7; d++)
                    {
                        int dayNumber = (int)(StartDayOfWeek + d) % 7;
                        string dayName = CultureInfo.CurrentCulture.DateTimeFormat.DayNames[dayNumber];
                        <div class="day-of-month">
                            <span class="full-dayname">@dayName</span>
                            <span class="short-dayname">@dayName.Substring(0, 3)</span>
                        </div>
                    }
                </div>

                @foreach (var week in GetDaysInRange().Chunk(7))
                {
                    var (start, end) = (week.First(), week.Last());
                    <SchedulerWeek Start="start" End="end" Appointments="GetAppointmentsInRange(start, end)" @key="week" />
                }
            </div>
        }
        else if (CalendarViewTypeService.IsWeek())
        {
            <div class="month">
                <div class="week header">
                    @for (int d = 0; d < 7; d++)
                    {
                        int dayNumber = (int)(StartDayOfWeek + d) % 7;
                        string dayName = CultureInfo.CurrentCulture.DateTimeFormat.DayNames[dayNumber];
                        <div class="day-of-month">
                            <span class="full-dayname">@dayName</span>
                            <span class="short-dayname">@dayName.Substring(0, 3)</span>
                        </div>
                    }
                </div>

                @{
                    var week = GetDaysInRange();
                    <SchedulerWeek Start="week.First()" End="week.Last()" Appointments="_appointments" @key="week" />
                }
            </div>
        }
        else
        {
            throw new NotImplementedException();
        }

    </CascadingValue>
</div>