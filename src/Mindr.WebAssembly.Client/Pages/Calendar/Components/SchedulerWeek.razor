@namespace Mindr.WebAssembly.Client.Pages.Calendar.Components
@using Mindr.WebAssembly.Client.Pages.Calendar.Extensions;

<div class="week">

    @if(CalendarViewTypeService.IsMonth())
    {
        <div class="days" style="--maxAppointments: @MaxVisibleAppointmentsThisWeek">
            @for (var dt = Start; dt <= End; dt = dt.AddDays(1))
            {
                <SchedulerDay Day="dt" @key="dt" />
            }
        </div>
        <div class="appointments">
            @foreach (var (appointment, order) in _orderings)
            {
                if(appointment.Data.StartDate.GetDateTime() != null)
                {
                    <SchedulerAppointment Appointment="appointment" Order="order" @key="appointment" />
                }
                else
                {
                    var (start, end) = _startsAndEnds[appointment];
                    <SchedulerAllDayAppointment Appointment="appointment" Order="order" Start="start" End="end" @key="appointment" />
                }
@*
                int maxOrderOfSpan = _orderings
                .Where(x => (x.Key.Data.StartDate.GetDateTime(), x.Key.Data.EndDate.GetDateTime()).Overlaps((appointment.Data.StartDate.GetDateTime().Date, appointment.Data.EndDate.GetDateTime().Date)) && !Scheduler.IsDayBeingScheduled(x.Key))
                .Max(x => (int?)x.Value) ?? 0;
                if (order < MaxNumOfAppointmentsPerDay || (order == MaxNumOfAppointmentsPerDay && maxOrderOfSpan <= MaxNumOfAppointmentsPerDay) || Scheduler.IsDayBeingScheduled(appointment))
                {
                    bool isTimedAppointment = appointment.Data.StartDate.GetDateTime().Date == appointment.Data.EndDate.GetDateTime().Date && appointment.Data.StartDate.GetDateTime() != appointment.Data.EndDate.GetDateTime();
                    if (isTimedAppointment)
                    {
                    }
                    else
                    {
                        var (start, end) = _startsAndEnds[appointment];
                        <SchedulerAllDayAppointment Appointment="appointment" Order="order" Start="start" End="end" @key="appointment" />
                    }
                }*@
            }
           @* @for (var dt = Start; dt <= End; dt = dt.AddDays(1))
            {
                var todaysAppointments = _orderings.Where(x => dt.Between(x.Key.Data.StartDate.GetDateTime().Date, x.Key.Data.EndDate.GetDateTime().Date) && !Scheduler.IsDayBeingScheduled(x.Key));
                int maxOrder = todaysAppointments.Max(x => (int?)x.Value) ?? 0;
                if (maxOrder > MaxNumOfAppointmentsPerDay)
                {
                    var numOverFlowAppointments = todaysAppointments.Count(x => x.Value > MaxNumOfAppointmentsPerDay - 1);
                    <SchedulerAppointmentOverflow Day="dt"
                                                  AppointmentCount="numOverFlowAppointments"
                                                  Start="(dt.DayOfWeek - Scheduler.StartDayOfWeek + 7) % 7"
                                                  Order="MaxNumOfAppointmentsPerDay"
                    @key="dt" />
                }
            }*@
        </div>
    }
    else if (CalendarViewTypeService.IsWeek())
    {
        <div class="days">
            @for (var dt = Start; dt <= End; dt = dt.AddDays(1))
            {
                <SchedulerDay Day="dt" @key="dt" />
            }
        </div>
        <div class="appointments">
            @foreach (var (appointment, timespan) in _startsAndEnds)
            {
                @*for (var i = timespan.Item1; i <= timespan.Item2; i++)
                {*@
                    <SchedulerAllDayAppointment Appointment="appointment" Start="timespan.Item1" End="0" @key="appointment" />
                @*}*@
            }
        </div>
    }
</div>