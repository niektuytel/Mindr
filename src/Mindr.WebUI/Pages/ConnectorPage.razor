@page "/connectors"

@using Microsoft.AspNetCore.Authorization;
@using Mindr.Core.CalendarExtensions;
@using Mindr.Core.Enums;
@using Mindr.Core.Extensions;
@using Mindr.WebUI.Models;
@using Newtonsoft.Json;
@using Plk.Blazor.DragDrop
@using System.Text;
@using System.Net.Http.Headers;

@namespace Mindr.WebUI.Pages
@inherits FluentComponentBase
@attribute [Authorize]


<Stack Orientation="Orientation.Horizontal" Class="editable-stack">
    <FluentButton Disabled="false" Appearance="Appearance.Stealth" Style="border-radius: 0;" @onclick="AddHttpRequest">
        <FluentIcon Slot="start" Name="@FluentIcons.Add" Size="@IconSize.Size16" Variant="@IconVariant.Regular" Color="@Color.Accent" />
        Add
    </FluentButton>
    <FluentButton Disabled="false" Appearance="Appearance.Stealth" Style="border-radius: 0;" @onclick="AddHttpCollection">
        <FluentIcon Slot="start" Name="@FluentIcons.ChannelAdd" Size="@IconSize.Size16" Variant="@IconVariant.Regular" Color="@Color.Accent" />
        Add Collection
    </FluentButton>
    <FluentButton Disabled="@(SelectedHttpIndex == -1)" Appearance="Appearance.Stealth" Style="border-radius: 0;" @onclick="OnHttpItemRemove">
        <FluentIcon Slot="start" Name="@FluentIcons.Delete" Size="@IconSize.Size16" Variant="@IconVariant.Filled" Color="@Color.Accent" />
        Remove
    </FluentButton>
    <FluentButton Disabled="false" Appearance="Appearance.Stealth" Style="border-radius: 0;" @onclick="OnHttpPipelineRun">
        <FluentIcon Slot="start" Name="@FluentIcons.Play" Size="@IconSize.Size16" Variant="@IconVariant.Regular" Color="@Color.Accent" />
        Run
    </FluentButton>
    @*<FluentButton Disabled="false" Appearance="Appearance.Stealth" Style="border-radius: 0;" @onclick="OnHttpPipelineExport">
        <FluentIcon Slot="start" Name="@FluentIcons.ArrowExportLTR" Size="@IconSize.Size16" Variant="@IconVariant.Regular" Color="@Color.Accent" />
        Export
    </FluentButton>*@
</Stack>
<Stack Orientation="Orientation.Horizontal">
    <Dropzone Items="HttpPipeline">
        <Stack Orientation="Orientation.Vertical" HorizontalAlignment="StackHorizontalAlignment.Center" VerticalGap="0">
            <FluentCard class="overflow-ellipsis step-card" Style="width:300px" title="@context.Description" onclick="@(() => OnSelectHandle(HttpPipeline.IndexOf(context)))">
                <Stack Orientation="Orientation.Horizontal" Style="padding: 5px;" HorizontalGap="0" HorizontalAlignment="StackHorizontalAlignment.Center">
                    <div style=@("border-right: ridge;padding-right:5px;" + GetMethodStyle(context.Request.Method))>
                        @context.Request.Method.ToUpper()
                    </div>
                    <div class="overflow-ellipsis" style="padding-left:5px">
                        @context.Request.Url.Raw
                    </div>
                </Stack>
                <FluentDivider />
                <Stack Orientation="Orientation.Horizontal" Style="padding: 5px;" HorizontalGap="0">
                    <div class="overflow-ellipsis" style="padding: 5px;">
                        @context.Name
                    </div>
                </Stack>
            </FluentCard>
            <div class="seperator" />
        </Stack>
    </Dropzone>
    @if (SelectedHttpIndex != -1 && HttpPipeline[SelectedHttpIndex].Request.Variables != null && HttpPipeline[SelectedHttpIndex].Request.Variables!.Any())
    {
        <Stack Orientation="Orientation.Vertical" HorizontalAlignment="StackHorizontalAlignment.Center" VerticalGap="0">
            <FluentCard class="overflow-ellipsis" title="Needed input">
                <Stack Orientation="Orientation.Vertical" Style="padding: 5px;" HorizontalGap="0">
                    @foreach (var input in HttpPipeline[SelectedHttpIndex].Request.Variables!)
                    {
                        <FluentTextField @bind-Value="@input.Value" title="@input.Key" style="width: 100%;" Placeholder="@input.Key"/>
                    }
                </Stack>
            </FluentCard>
        </Stack>
    }
</Stack>
<div>
    <FluentDialog @ref="MyFluentDialog" aria-label="Simple dialog" Modal=@Modal TrapFocus=@TrapFocus @ondialogdismiss=OnDismiss>
        <Collection Data="@Collections" OnAddHandle="OnHttpItemAdd" />
        <FluentButton Appearance="Appearance.Accent" Autofocus="true" @onclick="OnClose">Close dialog</FluentButton>
        <FluentButton>Another button</FluentButton>
    </FluentDialog>
</div>
<div>
    <FluentDialog @ref="MyPipelineFluentDialog" aria-label="Simple dialog" Modal=@Modal TrapFocus=@TrapFocus @ondialogdismiss=OnPipelineDismiss>
        TODO: UPLOAD button with validation
        <FluentButton Appearance="Appearance.Accent" Autofocus="true" @onclick="OnPipelineClose">Close dialog</FluentButton>
        <FluentButton>Another button</FluentButton>
    </FluentDialog>
</div>


@code {

    public List<HttpCollection> Collections { get; set; } = new List<HttpCollection>();



    private FluentDialog? MyFluentDialog;
    private FluentDialog? MyPipelineFluentDialog;
    public bool TrapFocus = true;
    public bool Modal = true;
    private string? status;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            MyFluentDialog!.Hide();
            MyPipelineFluentDialog!.Hide();
        }
    }

    private void AddHttpRequest()
    {
        if (Collections.Count() == 0)
        {
            var collection = JsonConvert.DeserializeObject<HttpCollection>(_Constants.Json);
            Collections.Add(collection);
        }

        MyFluentDialog!.Show();
    }

    private void AddHttpCollection()
    {
        MyPipelineFluentDialog!.Show();
    }

    private void OnClose()
    {
        MyFluentDialog!.Hide();

    }

    private void OnPipelineClose()
    {
        MyPipelineFluentDialog!.Hide();

    }

    private void OnDismiss(DialogEventArgs args)
    {
        if (args is not null && args.Reason is not null && args.Reason == "dismiss")
        {
            MyFluentDialog!.Hide();
        }
    }

    private void OnPipelineDismiss(DialogEventArgs args)
    {
        if (args is not null && args.Reason is not null && args.Reason == "dismiss")
        {
            MyPipelineFluentDialog!.Hide();
        }
    }
}

@code {
    public int SelectedHttpIndex { get; set; } = -1;
    public bool HttpPipelineLoading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {



    }

    public void OnSelectHandle(int index)
    {
        SelectedHttpIndex = index;
        if (HttpPipeline[index].Request.Variables == null)
        {
            HttpPipeline[index].Request.Variables = HttpPipeline[index].Request.GetVariables();
        }

        base.StateHasChanged();
    }

    public void OnHttpItemAdd(HttpItem item)
    {
        HttpPipeline.Add(item);
        SelectedHttpIndex++;

        MyFluentDialog!.Hide();
        base.StateHasChanged();
    }

    public void OnHttpPipelineAdd(IEnumerable<HttpItem> items)
    {
        HttpPipeline.AddRange(items);
        SelectedHttpIndex++;

        MyPipelineFluentDialog!.Hide();
        base.StateHasChanged();
    }

    public void OnHttpItemRemove()
    {
        HttpPipeline.RemoveAt(SelectedHttpIndex);
        SelectedHttpIndex = -1;

        base.StateHasChanged();
    }

    public async Task OnHttpPipelineRun()
    {
        HttpPipelineLoading = true;
        foreach (var httpItem in HttpPipeline)
        {
            await HttpRun(httpItem.Request);
        }
        HttpPipelineLoading = false;
    }

    public async Task OnHttpPipelineExport()
    {
        HttpCollection.Items = HttpPipeline.ToArray();

        // TODO: export file
    }



    string GetMethodStyle(string method)
    {
        var value = method.ToLower();
        if(value == "get")
        {
            return "font-weight: bold;color: green;";
        }

        if (value == "post")
        {
            return "font-weight: bold;color: orange;";
        }

        if (value == "delete")
        {
            return "font-weight: bold;color: red;";
        }

        return "";
    }

    public async Task HttpRun(HttpRequest http)
    {
        http = http.SetVariables();

        var client = new HttpClient();
        //HttpClient client = new HttpClient();
        //client.BaseAddress = new Uri(uri);

        client.DefaultRequestHeaders
              .Accept
              .Add(new MediaTypeWithQualityHeaderValue("application/json"));//ACCEPT header

        foreach (var item in http.Header)
        {
            if (item.Key == "Content-Type") continue;

            client.DefaultRequestHeaders.Add(item.Key, item.Value);
        }


        var request = new HttpRequestMessage();
        if (http.Method.ToLower() == "get")
        {
            request = new HttpRequestMessage(HttpMethod.Get, http.Url.Raw);
        }
        else if (http.Method.ToLower() == "post")
        {
            request = new HttpRequestMessage(HttpMethod.Post, http.Url.Raw);
            request.Content = new StringContent(http.Body.Raw, Encoding.UTF8, "application/json");//CONTENT-TYPE header
        }
        else if (http.Method.ToLower() == "delete")
        {
            request = new HttpRequestMessage(HttpMethod.Delete, http.Url.Raw);
        }

        try
        {
            var response = await client.SendAsync(request);
        }
        catch (Exception ex)
        {
            throw;
        }

    }
}

