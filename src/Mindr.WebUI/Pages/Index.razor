@attribute [Route($"/")]
@*Constants.CounterRoute*@

@using Microsoft.AspNetCore.Authorization;
@using Mindr.Core.Models.ConnectorEvents;
@using Mindr.Core.Models.Connectors;
@using System.Collections.ObjectModel;
@using Mindr.WebUI.Services;
@using Newtonsoft.Json;
@using Mindr.WebUI.Interfaces;

@inherits FluentComponentBase
@attribute [Authorize]

<PageTitle>Overview</PageTitle>
@*
    // TODO: extra tab to display clicked connector event
*@

<Breadcrumb />


<FluentAnchor Href="@GetGoogleCalendarConsent()">
    Get google calendar
    <FluentIcon Slot="end" Name="@FluentIcons.Globe" Size="@IconSize.Size16" Color=Color.Neutral />
</FluentAnchor>



@*
<Stack Orientation="Orientation.Horizontal" HorizontalGap="0" Style="height:100%">
    <FluentDataGrid TGridItem="ConnectorEvent"
                    RowsDataProvider="@DataProvider"
                    OnCellFocus="HandleCellFocus">
        <PropertyColumn Property="@(p => p.UserId)" />
        <PropertyColumn Property="@(p => p.EventId)" />
        <PropertyColumn Property="@(p => p.ConnectorId)" />
        <PropertyColumn Property="@(p => p.JobId)" />
    </FluentDataGrid>
</Stack>

@code {

    private bool FirstRender = true;

    public int ItemsPerPage { get; set; } = 10;

    public PaginationState Pagination { get; set; } = new() { ItemsPerPage = 10 };

    private GridItemsProviderRequest<ConnectorEvent> DataProviderRequest { get; set; } = default!;

    private GridItemsProvider<ConnectorEvent> DataProvider { get; set; } = default!;

    private ICollection<ConnectorEvent>? DataCollection { get; set; } = new Collection<ConnectorEvent>(new List<ConnectorEvent>()
    {
        new ConnectorEvent() { UserId = "User id 1", EventId="ConnectorEvent id 1", ConnectorId = Guid.NewGuid(), JobId="Job id 1"},
        new ConnectorEvent() { UserId = "User id 2", EventId="ConnectorEvent id 2", ConnectorId = Guid.NewGuid(), JobId="Job id 2"},
        new ConnectorEvent() { UserId = "User id 3", EventId="ConnectorEvent id 3", ConnectorId = Guid.NewGuid(), JobId="Job id 3"},
        new ConnectorEvent() { UserId = "User id 4", EventId="ConnectorEvent id 4", ConnectorId = Guid.NewGuid(), JobId="Job id 4"},
        new ConnectorEvent() { UserId = "User id 5", EventId="ConnectorEvent id 5", ConnectorId = Guid.NewGuid(), JobId="Job id 5"},
        new ConnectorEvent() { UserId = "User id 6", EventId="ConnectorEvent id 6", ConnectorId = Guid.NewGuid(), JobId="Job id 6"},
        new ConnectorEvent() { UserId = "User id 7", EventId="ConnectorEvent id 7", ConnectorId = Guid.NewGuid(), JobId="Job id 7"},
    });


    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public IHttpConnectorEventClient ConnectorClient { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        FirstRender = firstRender;
        if (firstRender)
        {
            await UpdateDataProvider();
        }

        await base.OnAfterRenderAsync(firstRender);
    }


    private async Task HandleRowClick(ConnectorEvent? item)
    {
        if (item == null) return;

        NavigationManager.NavigateTo($"/{item!.Id}");

        base.StateHasChanged();

        //if (HasSelectableEntities)
        //{
        //    ((IRowSelectable)item).IsChecked = !((IRowSelectable)item).IsChecked;
        //}

        //if (OnRowClick.HasDelegate)
        //{
        //    await OnRowClick.InvokeAsync(item);
        //}
    }

    private async Task HandleCellFocus(FluentDataGridCell<ConnectorEvent> cell)
    {
        if (cell.CellType == DataGridCellType.Default)
        {
            // checkbox row
            //if (HasSelectableEntities && cell.GridColumn == 1)
            //{
            //    return;
            //}

            var value = cell.Owner.AdditionalAttributes?.GetValueOrDefault("aria-rowindex");
            if (value != null)
            {
                var index = (System.Index)((int)value - 2);
                var item = DataCollection?.ElementAtOrDefault(index);
                await HandleRowClick(item);
            }
        }

        base.StateHasChanged();
    }

    private async Task UpdateDataProvider()
    {
        //await UpdateFilterEquals();
        //UpdateFilterContains(filterCheck: false);

        Pagination = new PaginationState { ItemsPerPage = ItemsPerPage };
        DataProvider = async req =>
        {
            var response = await ConnectorClient.GetAll();
            if (response == null)
            {
                // Failed request
                throw new NotImplementedException();
            }

            var json = await response.Content.ReadAsStringAsync();
            if (!string.IsNullOrEmpty(json))
            {
                DataCollection = JsonConvert.DeserializeObject<ICollection<ConnectorEvent>>(json);
            }


            //await UpdateOnRequest(req);

            // +1 to add space to to 1 filled space,
            // The provide now knows that he need to add a next page
            var total = (DataProviderRequest.StartIndex + (DataCollection!.Count + 1));

            return GridItemsProviderResult.From(DataCollection, total);
        };

        base.StateHasChanged();
    }

}


*@