@page "/agenda"

@using Microsoft.AspNetCore.Authorization;
@using Mindr.Core.CalendarExtensions;
@using System.Globalization;

@namespace Mindr.WebUI.Pages

@inherits FluentComponentBase
@attribute [Authorize]

<Stack Orientation="Orientation.Horizontal">
    <div>
        <style>
            .dot {
                height: 5px;
                width: 5px;
                margin: 1px;
                border-radius: 50%;
                display: inline-block;
            }
        </style>
        <table>
            <thead>
                <tr>
                    <td style="text-align-last: center;">Sun</td>
                    <td style="text-align-last: center;">Mon</td>
                    <td style="text-align-last: center;">Tue</td>
                    <td style="text-align-last: center;">Wed</td>
                    <td style="text-align-last: center;">Thu</td>
                    <td style="text-align-last: center;">Fri</td>
                    <td style="text-align-last: center;">Sat</td>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < CalendarController.COUNT_DAYS_IN_CALENDAR; i++)
                {
                    <tr>
                        @foreach (var day in Days.Skip(i * 7).Take(7))
                        {
                            var eventItems = Events?.Where(item => day.Date >= item.StartDate.Date && day.Date <= item.EndDate.Date);
    
                            if (day.Date.Month == SelectedDate.Month)
                            {
                                <td>
                                    <div style=@($"border-radius:10px;box-shadow: {(day.Date == SelectedDate.Date ? "0px 0px 3px 1px #1c7dce" : "0px 0px 5px 2px #0000001f")};width: 40px;height: 40px;cursor: pointer;margin:5px") onclick="@(async () => await OnSelectDate(day.Date))">
                                        <b style="margin:2px">@day.DayNumber</b>
                                        @if (eventItems?.Any() == true)
                                        {
                                            <Stack Orientation="Orientation.Horizontal" HorizontalGap="0" Style="height: -webkit-fill-available;">
                                                @foreach (var item in eventItems)
                                                {
                                                    <span class="dot" style=@($"background-color: {item.Color};")></span>
                                                }
                                            </Stack>
                                        }
                                    </div>
                                </td>
                            }
                            else
                            {
                                <td>
                                    <div style="border-radius:10px;box-shadow: 0px 0px 5px 2px #0000001f;width: 40px;height: 40px;cursor: pointer;margin:5px;background-color: #80808014;" onclick="@(async () => await OnSelectDate(day.Date))">
                                        <b style="margin:2px">@day.DayNumber</b>
                                        @if (eventItems?.Any() == true)
                                        {
                                            <Stack Orientation="Orientation.Horizontal" HorizontalGap="0" Style="height: -webkit-fill-available;">
                                                @foreach (var item in eventItems)
                                                {
                                                    <span class="dot" style=@($"background-color: {item.Color};")></span>
                                                }
                                            </Stack>
                                        }
                                    </div>
                                </td>
                            }
                        }
                    </tr>
                }
            </tbody>
        </table>
        <Stack Orientation="Orientation.Horizontal" HorizontalAlignment="StackHorizontalAlignment.Right" VerticalGap="0">
            <FluentButton onclick="@(async () => await OnSelectDate(SelectedDate.Date.AddMonths(-1)))">
                <FluentIcon Name="@FluentIcons.ChevronCircleLeft" Size="@IconSize.Size24" Variant="@IconVariant.Regular" Color="@Color.Accent" />
            </FluentButton>
            <div style="align-self: center;">
                @DateTimeFormatInfo.CurrentInfo.GetAbbreviatedMonthName(SelectedDate.Month)
            </div>
            <FluentButton onclick="@(async () => await OnSelectDate(SelectedDate.Date.AddMonths(1)))">
                <FluentIcon Name="@FluentIcons.ChevronCircleRight" Size="@IconSize.Size24" Variant="@IconVariant.Regular" Color="@Color.Accent" />
            </FluentButton>
        </Stack>
    </div>
    <div style="width: -webkit-fill-available;">
        @SelectedDate.ToShortDateString() Events
        @{
            var items = Events?.Where(item => SelectedDate.Date >= item.StartDate.Date && SelectedDate.Date <= item.EndDate.Date);
        }
        @if(items?.Any() == true)
        {
            foreach (var item in items)
            {
                <div style=@("cursor: pointer;width: -webkit-fill-available;height: 75px;border-radius: 5px;box-shadow: 0px 0px 5px 2px #0000001f;margin: 10px;" + "border-color:" + item.Color) onclick="@(() => OnEventOpen(item))">
                    <div>@item.StartDate.ToString() - @item.EndDate.ToString()</div>
                    @item.Subject
                </div>
            }
        }
    </div>
</Stack>
<div>
    <FluentDialog @ref="EventDialog" aria-label="Simple dialog" Modal=@Modal TrapFocus=@TrapFocus @ondialogdismiss=OnEventDismiss>
        @if (SelectedEvent != null)
        {
            <h2>@SelectedEvent.Subject</h2>
            <FluentButton Appearance="Appearance.Neutral">
                Connector 1
                <FluentBadge Appearance="Appearance.Accent" slot="end">New!</FluentBadge>
            </FluentButton>
            <FluentButton Appearance="Appearance.Neutral">
                Connector 2
                <FluentBadge Appearance="Appearance.Accent" slot="end">New!</FluentBadge>
            </FluentButton>
            <Stack Style="margin-top:5px">
                <FluentButton Appearance="Appearance.Accent" Autofocus="true" @onclick="OnEventClose">Close dialog</FluentButton>
                @*<FluentButton>Another button</FluentButton>*@
            </Stack>
        }
    </FluentDialog>
</div>


@code {



    private int MAX_ITEMS_THAT_FIT_DAY = 2;
    private CalendarDay selectedDay = new CalendarDay
    {
        Date = DateTime.Now
    };


    private int year = DateTime.Now.Year;
    private int month = DateTime.Now.Month;


    //private FluentDialog? MyFluentDialog;
    public bool TrapFocus = true;
    public bool Modal = true;
    private string? status;

    //protected override void OnAfterRender(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        MyFluentDialog!.Hide();
    //    }
    //}

    //private async Task OnOpen(CalendarEvent item)
    //{
    //    status = "Dialog opened with button click";
    //    MyFluentDialog!.Show();
    //}

    //private void OnClose()
    //{
    //    status = $"Dialog dismissed with reason: Close button clicked";
    //    MyFluentDialog!.Hide();
    //    EventDialog!.Hide();

    //}

    //private void OnDismiss(DialogEventArgs args)
    //{
    //    if (args is not null && args.Reason is not null && args.Reason == "dismiss")
    //    {
    //        status = $"Dialog dismissed with reason: Dismissed";
    //        MyFluentDialog!.Hide();
    //        EventDialog!.Hide();
    //    }
    //}



}

