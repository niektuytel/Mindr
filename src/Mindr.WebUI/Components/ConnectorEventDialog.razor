@using Mindr.Core.Models.Connector;
@inherits FluentComponentBase

<div>
    <FluentDialog Modal="true"
                  TrapFocus="true"
                  @ref="Dialog"
                  @ondialogdismiss="HandleOnDialogDismiss">

        <FluentCombobox Placeholder="Whatsapp message..."
                        Style="width: 100%;"
                        Multiple="false"
                        Items=@Results
                        TOption="ConnectorEvent"
                        OptionText="@(i => i.ConnectorName)"
                        OptionValue="@(i => i.Id.ToString())"
                        Autocomplete="ComboboxAutocomplete.Both" 
                        SelectedOptionChanged="@((input) => HandleOnSelect(input))"
                        @bind-Text="@Query"
                        @oninput="@(async (input) => await HandleOnSearch(input))" 
                        />
        @if (ConnectorEvent != null)
        {
            <div style="margin:10px">
                @foreach (var variable in ConnectorEvent.Variables)
                {
                    <FluentTextField title="@variable.Description"
                                     Placeholder="Required"
                                     Style="width: 100%;"
                                     @bind-Value="@variable.Value">
                        @variable.Name
                    </FluentTextField>
                }
                <Stack HorizontalAlignment="StackHorizontalAlignment.Right" Style="margin-top:5px">
                    @if (IsLoading)
                    {
                        <FluentProgressRing Style="width: 24px; height: 24px;"></FluentProgressRing>
                    }
                    else
                    {
                        <FluentButton @onclick="@GoToConnector">
                            <FluentIcon Name="@FluentIcons.Link" 
                                        Size="@IconSize.Size16" 
                                        Variant="@IconVariant.Regular" 
                                        Color="@Color.Accent" 
                            />
                        </FluentButton>
                        if (IsCreating == false)
                        {
                            <FluentButton Appearance="Appearance.Accent"
                                  Autofocus="true"
                                  @onclick="HandleOnDelete">
                                Delete
                            </FluentButton>
                        }
                        <FluentButton Appearance="Appearance.Accent"
                                      Autofocus="true"
                                      @onclick="HandleOnUpsert"
                        >
                            @(IsCreating ? "Create" : "Update")
                        </FluentButton>
                    }
                </Stack>
            </div>
        }
    </FluentDialog>
</div>

