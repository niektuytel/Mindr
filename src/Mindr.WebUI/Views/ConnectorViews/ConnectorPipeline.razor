@namespace Mindr.WebUI.Views.Connectors
@using Mindr.WebUI.Views.Connectors.Components

@inherits FluentComponentBase

<Stack Orientation="Orientation.Vertical" VerticalGap="0">
    <Stack Orientation="Orientation.Horizontal" Class="editable-stack" HorizontalGap="0">
        <FluentButton Disabled="@(!HasChangedData)" Appearance="Appearance.Stealth" Style="border-radius: 0;" @onclick="OnHandleSave">
            <FluentIcon Slot="start" Name="@FluentIcons.Play" Size="@IconSize.Size16" Variant="@IconVariant.Regular" Color="@Color.Accent" />
            Save
        </FluentButton>
        <FluentButton Appearance="Appearance.Stealth" Style="border-radius: 0;" @onclick="OpenItemDialog">
            <FluentIcon Slot="start" Name="@FluentIcons.Add" Size="@IconSize.Size16" Variant="@IconVariant.Regular" Color="@Color.Accent" />
            Add
        </FluentButton>
        <FluentButton Appearance="Appearance.Stealth" Style="border-radius: 0;" @onclick="OnHandleRun">
            <FluentIcon Slot="start" Name="@FluentIcons.Play" Size="@IconSize.Size16" Variant="@IconVariant.Regular" Color="@Color.Accent" />
            Run
        </FluentButton>
    </Stack>
    <Stack Orientation="Orientation.Horizontal">
        @if (IsLoading)
        {
            <Stack HorizontalAlignment="StackHorizontalAlignment.Center" VerticalAlignment="StackVerticalAlignment.Center">
                <FluentProgressRing />
            </Stack>
        }
        else if (HttpItems?.Any() == true)
        {
            <Dropzone Items="HttpItems">
                <HttpItemCard 
                    Data="@context" 
                    IsSelected="@(SelectedHttpItem?.Id == context.Id)"
                    OnHandleSelect="@OnItemSelect" 
                    OnHandleRemove="@OnItemRemove"
                    OnHandleEdit="@OnItemEdit"
                />
            </Dropzone>
        }
        @if(SelectedHttpItem != null)
        {
            <Stack 
                Orientation="Orientation.Vertical" 
                HorizontalAlignment="StackHorizontalAlignment.Center" 
                VerticalGap="0"
            >
                <FluentCard class="overflow-ellipsis" title="Needed input">
                    <Stack Orientation="Orientation.Horizontal" Class="editable-stack">
                        <FluentButton 
                            Disabled="false" 
                            Appearance="Appearance.Stealth" 
                            Style="border-radius: 0;" 
                            @onclick="OnItemRun"
                        >
                            <FluentIcon 
                                Slot="start" 
                                Name="@FluentIcons.Play" 
                                Size="@IconSize.Size16" 
                                Variant="@IconVariant.Regular" 
                                Color="@Color.Accent" 
                            />
                            Run
                        </FluentButton>
                    </Stack>
                    @if (GetItemRequestVariables()?.Any() == true)
                    {
                        <div>
                            Input:
                            <Stack Orientation="Orientation.Vertical" Style="padding: 5px;" HorizontalGap="0">
                            @foreach (var variable in GetItemRequestVariables()!)
                                {
                                    <FluentTextField @bind-Value="@variable.Value" title="@variable.Key" style="width: 100%;" Placeholder="@variable.Key" />
                                }
                            </Stack>
                        </div>
                    }
                    @if (SelectedHttpItem?.Result != null)
                    {
                        <pre style="border: solid 1px lightgray;">@SelectedHttpItem?.Result!.ToString()</pre>
                    }
                    @if(GetItemResponseVariables()?.Any() == true)
                    {
                        <div>
                            Output:
                            <Stack Orientation="Orientation.Vertical" Style="padding: 5px;margin-top:40px" HorizontalGap="0">
                                @foreach (var variable in GetItemResponseVariables()!)
                                {
                                    <FluentTextField @bind-Value="@variable.Value" title="@variable.Key" style="width: 100%;" Placeholder="@variable.Key" />
                                }
                            </Stack> 
                        </div>
                    }
                </FluentCard>
            </Stack>
        }
    </Stack>
    <div>
        <FluentDialog
            Modal="true" 
            TrapFocus="true" 
            @ref="AddItemDialog" 
            @ondialogdismiss="DismissItemDialog"
        >
            <FluentTabs ActiveIndicator=false activeId="Request">
                <FluentTab id="Request">Request</FluentTab>
                <FluentTab id="Response">Response</FluentTab>
                <FluentTabPanel id="TabPanelRequest">
                    <Stack Orientation="Orientation.Horizontal" Style="width:100%">
                        <FluentSelect Items="@_Constants.RequestMethods"
                                      OptionText="@(i => i.Text)"
                                      OptionValue="@(i => i.Value)"
                                      OptionSelected="@(i => i.Selected)"
                                      @bind-Value="@NewHttpItem.Request.Method"
                                      Class="request-method"
                                      Style="min-width:auto" />
                        @*<FluentTextField Placeholder="Method" @bind-Value="" style="width: 100%;" />*@
                        <FluentTextField Placeholder="Url" @bind-Value="@NewHttpItem.Request.Url.Raw" Style="width:100%" />
                    </Stack>

                    <FluentTabs ActiveIndicator=false activeId="Header">
                        <FluentTab id="Header">Headers</FluentTab>
                        <FluentTab id="Body">Body</FluentTab>
                        <FluentTabPanel id="TabPanelHeader">
                            <table style="width:100%; padding:20px">
                                @foreach (var line in NewHttpItem.Request.Header)
                                {
                                    <tr>
                                        <td><FluentTextField Placeholder="New value" @bind-Value="@line.Key" style="width: 100%;" /></td>
                                        <td>:</td>
                                        <td><FluentTextField Placeholder="New value" @bind-Value="@line.Value" style="width: 100%;" /></td>
                                    </tr>
                                }
                                <tr>
                                    <td><FluentTextField Placeholder="New value" @bind-Value="@NewHeaderKey" @onfocusout="OnInsertHeaderLine" style="width: 100%;" /></td>
                                    <td>:</td>
                                    <td><FluentTextField Disabled="true" style="width: 100%;" /></td>
                                </tr>
                            </table>
                        </FluentTabPanel>
                        <FluentTabPanel id="TabPanelBody">
                            @*<MonacoEditor @bind-Value="@Code" Language="Json" IsDarkMode="@IsDarkMode" />*@
                            <FluentTextArea @bind-Value="@NewHttpItem.Request.Body.Raw" style="width: 100%;" />
                        </FluentTabPanel>
                    </FluentTabs>
                </FluentTabPanel>
                <FluentTabPanel id="TabPanelResponse">
                    @*TODO: response types that will been captured to add keys on.*@
                </FluentTabPanel>
            </FluentTabs>

            @* // TODO:
            Postman
            Name
            Description
            *@
            <Stack Orientation="Orientation.Horizontal" HorizontalAlignment="StackHorizontalAlignment.Right">
                <FluentButton Appearance="Appearance.Accent" Autofocus="true" @onclick="CloseItemDialog">Close dialog</FluentButton>
                <FluentButton Appearance="Appearance.Accent" Autofocus="true" @onclick="OnHandleAdd">Create</FluentButton>
            </Stack>
        </FluentDialog>
    </div>
</Stack>
